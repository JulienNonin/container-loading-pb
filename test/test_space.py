import unittest
import container_loading.cargo as clp

class SpaceTest(unittest.TestCase):

    def __init__(self, *args, **kwargs):
        super(SpaceTest, self).__init__(*args, **kwargs)
        self.space = clp.Space([5, 4, 0], [42, 27, 24])
        B1 = clp.BoxType([19, 12, 8], [1,1,1])
        B2 =  clp.BoxType([5, 24, 20])
        self.cargo = {B1:8, B2:4}

    def test_find_max_blocks(self):
        """Normal use case of the method find_max_blocks"""
        blocks = self.space.find_max_blocks(self.cargo)
        self.assertEqual(len(blocks), 8)

    def test_blocks_fit(self):
        """Check that each block generated by the method find_max_blocks
        fits into the space"""
        blocks = self.space.find_max_blocks(self.cargo)
        for block in blocks:
            for x in range(3):
                self.assertLessEqual(block.dim[x], self.space.dim[x])
    
    def test_too_small_space(self):
        cargo = {clp.BoxType([40, 30, 5]):1}
        blocks = self.space.find_max_blocks(cargo)
        self.assertListEqual(blocks, [])

    def test_split(self):
        """Normal use case of the method split"""
        boxtype = clp.BoxType([19, 12, 8], [1,1,1])
        box = clp.Box([8, 12, 19], boxtype)
        block = clp.Block(box, [4, 2, 1], self.space)
        split_space = self.space.split(block)
        new_spaces = [clp.Space([5, 28, 0], [32, 3, 24]), 
                      clp.Space([5, 4, 19], [32, 24, 5]),
                      clp.Space([37, 4, 0], [10, 27, 24])]
        for i in range(3):
            self.assertEqual(new_spaces[i], split_space[i])

    def test_split_too_small_space(self):
        pass
